<?xml version="1.0" encoding="UTF-8"?>
<files psalm-version="5.23.0@005e3184fb6de4350a873b9b8c4dc3cede9db762">
  <file src="src/Command/AbstractCommand.php">
    <MissingThrowsDocblock>
      <code><![CDATA[build]]></code>
      <code><![CDATA[build]]></code>
      <code><![CDATA[dispatch]]></code>
      <code><![CDATA[dispatch]]></code>
      <code><![CDATA[parent::__construct(static::getDefaultName())]]></code>
    </MissingThrowsDocblock>
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
      <code><![CDATA[write]]></code>
    </PossiblyUnusedMethod>
    <PossiblyUnusedProperty>
      <code><![CDATA[$symfonyStyle]]></code>
    </PossiblyUnusedProperty>
  </file>
  <file src="src/Command/CheckCommand.php">
    <MissingThrowsDocblock>
      <code><![CDATA[addArgument]]></code>
    </MissingThrowsDocblock>
    <UnusedClass>
      <code><![CDATA[CheckCommand]]></code>
    </UnusedClass>
  </file>
  <file src="src/Command/MatrixCommand.php">
    <MissingThrowsDocblock>
      <code><![CDATA[addArgument]]></code>
    </MissingThrowsDocblock>
    <UnusedClass>
      <code><![CDATA[MatrixCommand]]></code>
    </UnusedClass>
  </file>
  <file src="src/Command/RunCommand.php">
    <InvalidArgument>
      <code><![CDATA[$payload]]></code>
    </InvalidArgument>
    <MissingThrowsDocblock>
      <code><![CDATA[addArgument]]></code>
      <code><![CDATA[addArgument]]></code>
      <code><![CDATA[addArgument]]></code>
      <code><![CDATA[addOption]]></code>
      <code><![CDATA[dispatch]]></code>
      <code><![CDATA[getArgument]]></code>
      <code><![CDATA[getArgument]]></code>
      <code><![CDATA[parent::__construct('run')]]></code>
    </MissingThrowsDocblock>
    <MixedArgument>
      <code><![CDATA[$eventName]]></code>
      <code><![CDATA[$input->getArgument('payload')]]></code>
    </MixedArgument>
    <MixedAssignment>
      <code><![CDATA[$eventName]]></code>
    </MixedAssignment>
    <UndefinedInterfaceMethod>
      <code><![CDATA[writeln]]></code>
    </UndefinedInterfaceMethod>
    <UnusedClass>
      <code><![CDATA[RunCommand]]></code>
    </UnusedClass>
  </file>
  <file src="src/Command/WorkflowCommand.php">
    <MissingThrowsDocblock>
      <code><![CDATA[addArgument]]></code>
      <code><![CDATA[addOption]]></code>
    </MissingThrowsDocblock>
    <UnusedClass>
      <code><![CDATA[WorkflowCommand]]></code>
    </UnusedClass>
  </file>
  <file src="src/Compliance.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[main]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Configuration/ComplianceConfiguration.php">
    <MissingThrowsDocblock>
      <code><![CDATA[throw new RuntimeException();]]></code>
    </MissingThrowsDocblock>
    <MixedArgument>
      <code><![CDATA[$skips[$tool][$supportedPhpVersion] ?? []]]></code>
      <code><![CDATA[$supportedPhpVersion]]></code>
      <code><![CDATA[ComposerDependency::OPTIONS]]></code>
    </MixedArgument>
    <MixedArrayAccess>
      <code><![CDATA[PhpVersion::TO_STRING[$phpVersion]]]></code>
    </MixedArrayAccess>
    <MixedArrayOffset>
      <code><![CDATA[$skips[$tool][$supportedPhpVersion]]]></code>
    </MixedArrayOffset>
    <MixedArrayTypeCoercion>
      <code><![CDATA[$skips[$tool][$supportedPhpVersion]]]></code>
    </MixedArrayTypeCoercion>
    <MixedAssignment>
      <code><![CDATA[$supportedPhpVersion]]></code>
    </MixedAssignment>
    <MixedOperand>
      <code><![CDATA[ComposerDependency::CONFIG]]></code>
      <code><![CDATA[ComposerDependency::CONFIG]]></code>
      <code><![CDATA[PhpVersion::TO_STRING[$phpVersion]]]></code>
    </MixedOperand>
    <PossiblyInvalidArgument>
      <code><![CDATA[$skips[$tool] ?? []]]></code>
      <code><![CDATA[$skips[$tool][$phpVersion]]]></code>
    </PossiblyInvalidArgument>
    <PossiblyInvalidArrayAccess>
      <code><![CDATA[$skips[$tool][$phpVersion]]]></code>
      <code><![CDATA[$skips[$tool][$supportedPhpVersion]]]></code>
    </PossiblyInvalidArrayAccess>
    <UndefinedClass>
      <code><![CDATA[ComposerDependency]]></code>
      <code><![CDATA[ComposerDependency]]></code>
      <code><![CDATA[ComposerDependency]]></code>
      <code><![CDATA[PhpVersion]]></code>
      <code><![CDATA[PhpVersion]]></code>
      <code><![CDATA[PhpVersion]]></code>
      <code><![CDATA[PhpVersion]]></code>
    </UndefinedClass>
    <UndefinedDocblockClass>
      <code><![CDATA[array<ComposerDependency::*>]]></code>
    </UndefinedDocblockClass>
    <UnusedClass>
      <code><![CDATA[ComplianceConfiguration]]></code>
    </UnusedClass>
    <UnusedParam>
      <code><![CDATA[$options]]></code>
    </UnusedParam>
  </file>
  <file src="src/EnvironmentVariables.php">
    <MixedInferredReturnType>
      <code><![CDATA[string]]></code>
    </MixedInferredReturnType>
    <MixedReturnStatement>
      <code><![CDATA[match (true) {
            array_key_exists($name, $this->variables) => $this->variables[$name],
            $default !== null => $default,
            default => throw new VariableNotFoundException($name),
        }]]></code>
      <code><![CDATA[match (true) {
            array_key_exists($name, $this->variables) => $this->variables[$name],
            $default !== null => $default,
            default => throw new VariableNotFoundException($name),
        }]]></code>
    </MixedReturnStatement>
    <PossiblyUnusedMethod>
      <code><![CDATA[has]]></code>
      <code><![CDATA[set]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Event/AbstractEvent.php">
    <MissingTemplateParam>
      <code><![CDATA[EventTrait]]></code>
    </MissingTemplateParam>
    <MissingThrowsDocblock>
      <code><![CDATA[dispatch]]></code>
    </MissingThrowsDocblock>
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
      <code><![CDATA[getDispatcher]]></code>
      <code><![CDATA[getOutput]]></code>
    </PossiblyUnusedMethod>
    <PossiblyUnusedReturnValue>
      <code><![CDATA[EventInterface<bool>]]></code>
    </PossiblyUnusedReturnValue>
  </file>
  <file src="src/Event/ConfigEvent.php">
    <UnusedClass>
      <code><![CDATA[ConfigEvent]]></code>
    </UnusedClass>
  </file>
  <file src="src/Event/MatrixEvent.php">
    <InvalidPropertyAssignmentValue>
      <code><![CDATA[$this->matrix]]></code>
    </InvalidPropertyAssignmentValue>
    <MissingThrowsDocblock>
      <code><![CDATA[encode]]></code>
    </MissingThrowsDocblock>
    <PossiblyUnusedMethod>
      <code><![CDATA[exclude]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Extension/ConfigExtension.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Extension/ListenerProviderExtension.php">
    <MissingThrowsDocblock>
      <code><![CDATA[bind]]></code>
    </MissingThrowsDocblock>
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Extension/SymfonyApplicationExtension.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Factory/ComposerExecutableFinderFactory.php">
    <MissingThrowsDocblock>
      <code><![CDATA[get]]></code>
      <code><![CDATA[get]]></code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Factory/SymfonyApplicationFactory.php">
    <MixedArgument>
      <code><![CDATA[InstalledVersions::getPrettyVersion(Compliance::PACKAGE) ??
            throw new RuntimeException('Unable to determine version!')]]></code>
    </MixedArgument>
  </file>
  <file src="src/Interface/Composer/DependencyInterface.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[name]]></code>
      <code><![CDATA[version]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Listener/CheckListener.php">
    <MissingThrowsDocblock>
      <code><![CDATA[getArgument]]></code>
    </MissingThrowsDocblock>
    <UnusedClass>
      <code><![CDATA[CheckListener]]></code>
    </UnusedClass>
  </file>
  <file src="src/Listener/Debug.php">
    <PossiblyFalseOperand>
      <code><![CDATA[mb_strrpos($event::class, '\\')]]></code>
    </PossiblyFalseOperand>
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Listener/Logger.php">
    <MissingThrowsDocblock>
      <code><![CDATA[get]]></code>
      <code><![CDATA[get]]></code>
    </MissingThrowsDocblock>
    <UnusedClass>
      <code><![CDATA[Logger]]></code>
    </UnusedClass>
  </file>
  <file src="src/Listener/MatrixListener.php">
    <MissingThrowsDocblock>
      <code><![CDATA[throw new RuntimeException('Could not get current working directory');]]></code>
    </MissingThrowsDocblock>
    <PossiblyFalseArgument>
      <code><![CDATA[tempnam(sys_get_temp_dir(), 'GITHUB_OUTPUT')]]></code>
    </PossiblyFalseArgument>
    <UnnecessaryVarAnnotation>
      <code><![CDATA[string]]></code>
    </UnnecessaryVarAnnotation>
    <UnusedClass>
      <code><![CDATA[MatrixListener]]></code>
    </UnusedClass>
  </file>
  <file src="src/Listener/OutputListener.php">
    <UnusedClass>
      <code><![CDATA[OutputListener]]></code>
    </UnusedClass>
  </file>
  <file src="src/Service/Composer.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[getPhpVersionConstraint]]></code>
      <code><![CDATA[getRequire]]></code>
      <code><![CDATA[getRequireDev]]></code>
      <code><![CDATA[readLockFile]]></code>
    </PossiblyUnusedMethod>
    <RiskyTruthyFalsyComparison>
      <code><![CDATA[getenv('COMPOSER')]]></code>
    </RiskyTruthyFalsyComparison>
  </file>
  <file src="src/Service/Composer/ComposerJson.php">
    <InvalidArrayOffset>
      <code><![CDATA[$contents['name']]]></code>
      <code><![CDATA[$contents['require']]]></code>
      <code><![CDATA[$contents['require-dev']]]></code>
      <code><![CDATA[$this->contents['license']]]></code>
      <code><![CDATA[$this->contents['name']]]></code>
      <code><![CDATA[$this->contents['version']]]></code>
    </InvalidArrayOffset>
    <MixedArgument>
      <code><![CDATA[$contents['name']]]></code>
      <code><![CDATA[$contents['require'] ?? []]]></code>
      <code><![CDATA[$contents['require']['php'] ?? '*']]></code>
      <code><![CDATA[$contents['require-dev'] ?? []]]></code>
      <code><![CDATA[$this->contents['license']]]></code>
      <code><![CDATA[$this->contents['version'] ??
            InstalledVersions::getPrettyVersion($this->contents['name'])]]></code>
    </MixedArgument>
    <MixedAssignment>
      <code><![CDATA[$dependency]]></code>
    </MixedAssignment>
    <PossiblyUnusedMethod>
      <code><![CDATA[getComposerJsonPath]]></code>
      <code><![CDATA[getContents]]></code>
      <code><![CDATA[getLicense]]></code>
      <code><![CDATA[getPackage]]></code>
      <code><![CDATA[getVersion]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Service/Composer/ComposerJsonReader.php">
    <MissingThrowsDocblock>
      <code><![CDATA[decode]]></code>
      <code><![CDATA[throw new InvalidArgumentException('Composer JSON file could not be read');]]></code>
      <code><![CDATA[throw new InvalidArgumentException('Composer JSON file does not exist: ' . $composerJsonPath);]]></code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Service/Composer/ComposerLock.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[getComposerJsonPath]]></code>
      <code><![CDATA[getContents]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Service/Composer/ComposerLockReader.php">
    <MissingThrowsDocblock>
      <code><![CDATA[decode]]></code>
      <code><![CDATA[throw new InvalidArgumentException('Composer JSON file could not be read');]]></code>
      <code><![CDATA[throw new InvalidArgumentException('Composer JSON file does not exist');]]></code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Service/Composer/DependencyName.php">
    <MissingThrowsDocblock>
      <code><![CDATA[throw new InvalidArgumentException('Name cannot be empty');]]></code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Service/Composer/DependencyVersion.php">
    <MissingThrowsDocblock>
      <code><![CDATA[throw new InvalidArgumentException('Version cannot be empty');]]></code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Service/Composer/ExtensionFinder.php">
    <MixedAssignment>
      <code><![CDATA[$dependency]]></code>
    </MixedAssignment>
    <UnusedClass>
      <code><![CDATA[ExtensionFinder]]></code>
    </UnusedClass>
  </file>
  <file src="src/Service/Composer/Extensions.php">
    <MissingThrowsDocblock>
      <code><![CDATA[throw new InvalidArgumentException('Extensions cannot be empty');]]></code>
    </MissingThrowsDocblock>
    <MixedArgumentTypeCoercion>
      <code><![CDATA[$this->jsonSerialize()]]></code>
    </MixedArgumentTypeCoercion>
  </file>
  <file src="src/Service/Composer/Package.php">
    <MissingThrowsDocblock>
      <code><![CDATA[encode]]></code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Service/Composer/Packages.php">
    <MissingThrowsDocblock>
      <code><![CDATA[encode]]></code>
    </MissingThrowsDocblock>
    <UnusedClass>
      <code><![CDATA[Packages]]></code>
    </UnusedClass>
  </file>
  <file src="src/Service/Composer/RequireDevList.php">
    <MixedArgument>
      <code><![CDATA[$version]]></code>
    </MixedArgument>
    <MixedArgumentTypeCoercion>
      <code><![CDATA[$name]]></code>
    </MixedArgumentTypeCoercion>
    <MixedAssignment>
      <code><![CDATA[$version]]></code>
    </MixedAssignment>
  </file>
  <file src="src/Service/Composer/RequireList.php">
    <MixedArgument>
      <code><![CDATA[$version]]></code>
    </MixedArgument>
    <MixedArgumentTypeCoercion>
      <code><![CDATA[$name]]></code>
    </MixedArgumentTypeCoercion>
    <MixedAssignment>
      <code><![CDATA[$version]]></code>
    </MixedAssignment>
  </file>
  <file src="src/Service/ComposerCacheFilesDirectoryFinder.php">
    <MissingThrowsDocblock>
      <code><![CDATA[throw new FailedToFindComposerCacheFilesDirectoryException($stderr);]]></code>
    </MissingThrowsDocblock>
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Service/ComposerExecutableFinder.php">
    <MissingThrowsDocblock>
      <code><![CDATA[throw new FailedToFindComposerExecutableException($stderr);]]></code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Service/ComposerFileField.php">
    <UnusedClass>
      <code><![CDATA[ComposerFileField]]></code>
    </UnusedClass>
  </file>
  <file src="src/Service/ComposerJsonFile.php">
    <UnusedClass>
      <code><![CDATA[ComposerJsonFile]]></code>
    </UnusedClass>
  </file>
  <file src="src/Service/ComposerLockFile.php">
    <UnusedClass>
      <code><![CDATA[ComposerLockFile]]></code>
    </UnusedClass>
  </file>
  <file src="src/Service/ConfigPlatformPhp.php">
    <UnusedClass>
      <code><![CDATA[ConfigPlatformPhp]]></code>
    </UnusedClass>
  </file>
  <file src="src/Service/Filesystem.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$levels]]></code>
    </ArgumentTypeCoercion>
    <MismatchingDocblockReturnType>
      <code><![CDATA[bool]]></code>
    </MismatchingDocblockReturnType>
    <MissingThrowsDocblock>
      <code><![CDATA[throw new RuntimeException(sprintf(
                'Filesystem::chgrp() failed because the path does not exist: %s',
                $path
            ));]]></code>
      <code><![CDATA[throw new RuntimeException(sprintf(
                'Filesystem::chmod() failed because the path does not exist: %s',
                $path
            ));]]></code>
      <code><![CDATA[throw new RuntimeException(sprintf(
                'Filesystem::chown() failed because the path does not exist: %s',
                $path
            ));]]></code>
      <code><![CDATA[throw new RuntimeException(sprintf(
                'Filesystem::copy() failed because the source path does not exist: %s',
                $source
            ));]]></code>
      <code><![CDATA[throw new RuntimeException(sprintf(
                'Filesystem::create() failed because the path already exists: %s',
                $path
            ));]]></code>
      <code><![CDATA[throw new RuntimeException(sprintf(
                'Filesystem::createDirectory() failed because the path already exists: %s',
                $path
            ));]]></code>
      <code><![CDATA[throw new RuntimeException(sprintf(
                'Filesystem::delete() failed because the path does not exist: %s',
                $path
            ));]]></code>
      <code><![CDATA[throw new RuntimeException(sprintf(
                'Filesystem::deleteDirectory() failed because the path does not exist: %s',
                $path
            ));]]></code>
      <code><![CDATA[throw new RuntimeException(sprintf(
                'Filesystem::move() failed because the source path does not exist: %s',
                $source
            ));]]></code>
      <code><![CDATA[throw new RuntimeException(sprintf('Filesystem::append() failed to write to path: %s', $path));]]></code>
      <code><![CDATA[throw new RuntimeException(sprintf('Filesystem::prepend() failed to write to path: %s', $path));]]></code>
      <code><![CDATA[throw new RuntimeException(sprintf('Filesystem::read() failed to read from path: %s', $path));]]></code>
      <code><![CDATA[throw new RuntimeException(sprintf('Filesystem::write() failed to write to path: %s', $path));]]></code>
    </MissingThrowsDocblock>
    <MixedAssignment>
      <code><![CDATA[$file]]></code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code><![CDATA[bool]]></code>
    </MixedInferredReturnType>
    <MixedOperand>
      <code><![CDATA[$file]]></code>
    </MixedOperand>
    <MixedReturnTypeCoercion>
      <code><![CDATA[Generator<SplFileInfo>]]></code>
    </MixedReturnTypeCoercion>
    <PossiblyFalseArgument>
      <code><![CDATA[scandir($path)]]></code>
    </PossiblyFalseArgument>
    <PossiblyUnusedMethod>
      <code><![CDATA[allFiles]]></code>
      <code><![CDATA[append]]></code>
      <code><![CDATA[chgrp]]></code>
      <code><![CDATA[chmod]]></code>
      <code><![CDATA[chown]]></code>
      <code><![CDATA[copy]]></code>
      <code><![CDATA[createFile]]></code>
      <code><![CDATA[delete]]></code>
      <code><![CDATA[exists]]></code>
      <code><![CDATA[findInRecursive]]></code>
      <code><![CDATA[glob]]></code>
      <code><![CDATA[missing]]></code>
      <code><![CDATA[move]]></code>
      <code><![CDATA[prepend]]></code>
    </PossiblyUnusedMethod>
    <UnusedParam>
      <code><![CDATA[$flags]]></code>
      <code><![CDATA[$pattern]]></code>
    </UnusedParam>
  </file>
  <file src="src/Service/GPG/Fingerprint.php">
    <UnusedClass>
      <code><![CDATA[Fingerprint]]></code>
    </UnusedClass>
  </file>
  <file src="src/Service/GPG/GnuPG2.php">
    <MissingThrowsDocblock>
      <code><![CDATA[throw new RuntimeException(sprintf('GnuPG binary "%s" does not exist', $binary));]]></code>
    </MissingThrowsDocblock>
    <UnusedClass>
      <code><![CDATA[GnuPG2]]></code>
    </UnusedClass>
  </file>
  <file src="src/Service/GPG/ImportPrivateKey.php">
    <UnusedClass>
      <code><![CDATA[ImportPrivateKey]]></code>
    </UnusedClass>
  </file>
  <file src="src/Service/GPG/ImportPublicKey.php">
    <UnusedClass>
      <code><![CDATA[ImportPublicKey]]></code>
    </UnusedClass>
  </file>
  <file src="src/Service/GPG/PrivateKey.php">
    <UnusedClass>
      <code><![CDATA[PrivateKey]]></code>
    </UnusedClass>
  </file>
  <file src="src/Service/GPG/PublicKey.php">
    <UnusedClass>
      <code><![CDATA[PublicKey]]></code>
    </UnusedClass>
  </file>
  <file src="src/Service/GithubActionOutput.php">
    <RiskyTruthyFalsyComparison>
      <code><![CDATA[! $file]]></code>
    </RiskyTruthyFalsyComparison>
    <UnusedClass>
      <code><![CDATA[GithubActionOutput]]></code>
    </UnusedClass>
  </file>
  <file src="src/Service/Job.php">
    <MixedArgumentTypeCoercion>
      <code><![CDATA[$extensions]]></code>
    </MixedArgumentTypeCoercion>
  </file>
  <file src="src/Service/Process.php">
    <LessSpecificReturnStatement>
      <code><![CDATA[[proc_close($process), ...$result]]]></code>
    </LessSpecificReturnStatement>
    <MissingThrowsDocblock>
      <code><![CDATA[throw new FailedToExecuteCommandException(implode(' ', $command));]]></code>
      <code><![CDATA[throw new FailedToWriteToStdinException();]]></code>
      <code><![CDATA[throw new ProcOpenFunctionDoesNotExistException();]]></code>
    </MissingThrowsDocblock>
    <MoreSpecificReturnType>
      <code><![CDATA[array{int,string,string}]]></code>
    </MoreSpecificReturnType>
  </file>
  <file src="src/ServiceProvider/ApplicationServiceProvider.php">
    <MissingThrowsDocblock>
      <code><![CDATA[provide]]></code>
      <code><![CDATA[provide]]></code>
      <code><![CDATA[provide]]></code>
      <code><![CDATA[provide]]></code>
      <code><![CDATA[provide]]></code>
      <code><![CDATA[provide]]></code>
    </MissingThrowsDocblock>
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/ServiceProvider/ConfigServiceProvider.php">
    <MissingThrowsDocblock>
      <code><![CDATA[alias]]></code>
      <code><![CDATA[alias]]></code>
      <code><![CDATA[alias]]></code>
      <code><![CDATA[alias]]></code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/ServiceProvider/ConsoleServiceProvider.php">
    <MissingThrowsDocblock>
      <code><![CDATA[alias]]></code>
      <code><![CDATA[alias]]></code>
      <code><![CDATA[alias]]></code>
      <code><![CDATA[alias]]></code>
      <code><![CDATA[alias]]></code>
      <code><![CDATA[alias]]></code>
      <code><![CDATA[alias]]></code>
      <code><![CDATA[alias]]></code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/ServiceProvider/EventServiceProvider.php">
    <MissingThrowsDocblock>
      <code><![CDATA[alias]]></code>
      <code><![CDATA[alias]]></code>
      <code><![CDATA[alias]]></code>
      <code><![CDATA[alias]]></code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Tool/AbstractTool.php">
    <PossiblyNullArgument>
      <code><![CDATA[preg_replace('#([a-zA-Z])(?=[A-Z])#', '$1-', $this->name())]]></code>
    </PossiblyNullArgument>
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Tool/ComposerRequireChecker.php">
    <UnusedClass>
      <code><![CDATA[ComposerRequireChecker]]></code>
    </UnusedClass>
  </file>
  <file src="src/Tool/Infection.php">
    <UnusedClass>
      <code><![CDATA[Infection]]></code>
    </UnusedClass>
  </file>
  <file src="src/Tool/PHPBench.php">
    <UnusedClass>
      <code><![CDATA[PHPBench]]></code>
    </UnusedClass>
  </file>
  <file src="src/Tool/PHPCS.php">
    <UnusedClass>
      <code><![CDATA[PHPCS]]></code>
    </UnusedClass>
  </file>
  <file src="src/Tool/Psalm.php">
    <UnusedClass>
      <code><![CDATA[Psalm]]></code>
    </UnusedClass>
  </file>
  <file src="src/Workspace.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$levels]]></code>
    </ArgumentTypeCoercion>
    <ForbiddenCode>
      <code><![CDATA[\var_dump(...$args)]]></code>
      <code><![CDATA[\var_dump(...$args)]]></code>
    </ForbiddenCode>
    <InvalidOperand>
      <code><![CDATA[\time()]]></code>
    </InvalidOperand>
    <MismatchingDocblockReturnType>
      <code><![CDATA[bool]]></code>
    </MismatchingDocblockReturnType>
    <MissingConstructor>
      <code><![CDATA[$character]]></code>
      <code><![CDATA[$contentChanges]]></code>
      <code><![CDATA[$document]]></code>
      <code><![CDATA[$end]]></code>
      <code><![CDATA[$line]]></code>
      <code><![CDATA[$start]]></code>
    </MissingConstructor>
    <MissingParamType>
      <code><![CDATA[$args]]></code>
      <code><![CDATA[$args]]></code>
    </MissingParamType>
    <MissingTemplateParam>
      <code><![CDATA[IteratorAggregate]]></code>
    </MissingTemplateParam>
    <MissingThrowsDocblock>
      <code><![CDATA[throw new Exception('Failed to save file ' . $documentUri->toString());]]></code>
      <code><![CDATA[throw new RuntimeException(\sprintf(
                'Filesystem::chgrp() failed because the path does not exist: %s',
                $path
            ));]]></code>
      <code><![CDATA[throw new RuntimeException(\sprintf(
                'Filesystem::chmod() failed because the path does not exist: %s',
                $path
            ));]]></code>
      <code><![CDATA[throw new RuntimeException(\sprintf(
                'Filesystem::chown() failed because the path does not exist: %s',
                $path
            ));]]></code>
      <code><![CDATA[throw new RuntimeException(\sprintf(
                'Filesystem::copy() failed because the source path does not exist: %s',
                $source
            ));]]></code>
      <code><![CDATA[throw new RuntimeException(\sprintf(
                'Filesystem::create() failed because the path already exists: %s',
                $path
            ));]]></code>
      <code><![CDATA[throw new RuntimeException(\sprintf(
                'Filesystem::createDirectory() failed because the path already exists: %s',
                $path
            ));]]></code>
      <code><![CDATA[throw new RuntimeException(\sprintf(
                'Filesystem::delete() failed because the path does not exist: %s',
                $path
            ));]]></code>
      <code><![CDATA[throw new RuntimeException(\sprintf(
                'Filesystem::deleteDirectory() failed because the path does not exist: %s',
                $path
            ));]]></code>
      <code><![CDATA[throw new RuntimeException(\sprintf(
                'Filesystem::move() failed because the source path does not exist: %s',
                $source
            ));]]></code>
      <code><![CDATA[throw new RuntimeException(\sprintf('Filesystem::append() failed to write to path: %s', $path));]]></code>
      <code><![CDATA[throw new RuntimeException(\sprintf('Filesystem::prepend() failed to write to path: %s', $path));]]></code>
      <code><![CDATA[throw new RuntimeException(\sprintf('Filesystem::read() failed to read from path: %s', $path));]]></code>
      <code><![CDATA[throw new RuntimeException(\sprintf('Filesystem::write() failed to write to path: %s', $path));]]></code>
    </MissingThrowsDocblock>
    <MixedArgument>
      <code><![CDATA[$documentUri->toString()]]></code>
      <code><![CDATA[$path]]></code>
    </MixedArgument>
    <MixedAssignment>
      <code><![CDATA[$file]]></code>
      <code><![CDATA[$path]]></code>
      <code><![CDATA[$splFileInfo]]></code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code><![CDATA[TextDocument]]></code>
      <code><![CDATA[TextDocument]]></code>
      <code><![CDATA[TextDocument]]></code>
      <code><![CDATA[bool]]></code>
    </MixedInferredReturnType>
    <MixedMethodCall>
      <code><![CDATA[getPathname]]></code>
      <code><![CDATA[isFile]]></code>
      <code><![CDATA[toString]]></code>
      <code><![CDATA[toString]]></code>
    </MixedMethodCall>
    <MixedOperand>
      <code><![CDATA[$documentUri->toString()]]></code>
      <code><![CDATA[$file]]></code>
    </MixedOperand>
    <MixedReturnStatement>
      <code><![CDATA[$this->textDocuments->offsetGet($uri) ?? $this->createTextDocument($uri)]]></code>
      <code><![CDATA[$this->textDocuments->offsetGet($uri) ?? $this->createTextDocument($uri)]]></code>
      <code><![CDATA[$this->textDocuments->offsetGet($uri) ?? throw new Exception('Document not found')]]></code>
      <code><![CDATA[match (true) {
            $this->textDocuments->offsetExists($documentUri) => $this->textDocuments->offsetGet($documentUri),
            default => $this->createTextDocument($documentUri),
        }]]></code>
      <code><![CDATA[match (true) {
            $this->textDocuments->offsetExists($documentUri) => $this->textDocuments->offsetGet($documentUri),
            default => $this->createTextDocument($documentUri),
        }]]></code>
    </MixedReturnStatement>
    <MixedReturnTypeCoercion>
      <code><![CDATA[Generator<SplFileInfo>]]></code>
    </MixedReturnTypeCoercion>
    <PossiblyFalseArgument>
      <code><![CDATA[$tempUri]]></code>
      <code><![CDATA[$tempUri]]></code>
      <code><![CDATA[$tempUri]]></code>
      <code><![CDATA[\file_get_contents($path)]]></code>
      <code><![CDATA[\scandir($path)]]></code>
    </PossiblyFalseArgument>
    <PossiblyInvalidDocblockTag>
      <code><![CDATA[@var WeakMap<DocumentUri,TextDocument>]]></code>
    </PossiblyInvalidDocblockTag>
    <PossiblyUnusedMethod>
      <code><![CDATA[allFiles]]></code>
      <code><![CDATA[append]]></code>
      <code><![CDATA[chgrp]]></code>
      <code><![CDATA[chmod]]></code>
      <code><![CDATA[chown]]></code>
      <code><![CDATA[copy]]></code>
      <code><![CDATA[createFile]]></code>
      <code><![CDATA[delete]]></code>
      <code><![CDATA[delete]]></code>
      <code><![CDATA[directories]]></code>
      <code><![CDATA[exists]]></code>
      <code><![CDATA[files]]></code>
      <code><![CDATA[getTextDocument]]></code>
      <code><![CDATA[glob]]></code>
      <code><![CDATA[hasTextDocument]]></code>
      <code><![CDATA[missing]]></code>
      <code><![CDATA[move]]></code>
      <code><![CDATA[onDidChangeTextDocument]]></code>
      <code><![CDATA[openTextDocument]]></code>
      <code><![CDATA[prepend]]></code>
      <code><![CDATA[saveTextDocument]]></code>
      <code><![CDATA[setTextDocument]]></code>
    </PossiblyUnusedMethod>
    <PossiblyUnusedProperty>
      <code><![CDATA[$character]]></code>
      <code><![CDATA[$languageId]]></code>
      <code><![CDATA[$line]]></code>
      <code><![CDATA[$version]]></code>
    </PossiblyUnusedProperty>
    <UnusedClass>
      <code><![CDATA[Range]]></code>
      <code><![CDATA[TextDocumentChangeEvent]]></code>
    </UnusedClass>
    <UnusedParam>
      <code><![CDATA[$callback]]></code>
      <code><![CDATA[$flags]]></code>
      <code><![CDATA[$pattern]]></code>
    </UnusedParam>
    <UnusedProperty>
      <code><![CDATA[$filesystem]]></code>
      <code><![CDATA[$rootPath]]></code>
    </UnusedProperty>
  </file>
  <file src="tests/Unit/Service/ComposerTest.php">
    <PossiblyFalseArgument>
      <code><![CDATA[$root]]></code>
      <code><![CDATA[$root]]></code>
    </PossiblyFalseArgument>
    <PossiblyFalseOperand>
      <code><![CDATA[$root]]></code>
      <code><![CDATA[$root]]></code>
    </PossiblyFalseOperand>
  </file>
</files>
