<?xml version="1.0" encoding="UTF-8"?>
<files psalm-version="5.20.0@3f284e96c9d9be6fe6b15c79416e1d1903dcfef4">
  <file src="src/Command/AbstractCommand.php">
    <MissingThrowsDocblock>
      <code>build</code>
      <code>build</code>
      <code>dispatch</code>
      <code>dispatch</code>
      <code>parent::__construct(static::getDefaultName())</code>
    </MissingThrowsDocblock>
    <PossiblyUnusedMethod>
      <code>__construct</code>
      <code>write</code>
    </PossiblyUnusedMethod>
    <PossiblyUnusedProperty>
      <code>$symfonyStyle</code>
    </PossiblyUnusedProperty>
  </file>
  <file src="src/Command/CheckCommand.php">
    <MissingThrowsDocblock>
      <code>addArgument</code>
    </MissingThrowsDocblock>
    <UnusedClass>
      <code>CheckCommand</code>
    </UnusedClass>
  </file>
  <file src="src/Command/MatrixCommand.php">
    <MissingThrowsDocblock>
      <code>addArgument</code>
    </MissingThrowsDocblock>
    <UnusedClass>
      <code>MatrixCommand</code>
    </UnusedClass>
  </file>
  <file src="src/Command/RunCommand.php">
    <InvalidArgument>
      <code>$payload</code>
    </InvalidArgument>
    <MissingThrowsDocblock>
      <code>addArgument</code>
      <code>addArgument</code>
      <code>addArgument</code>
      <code>addOption</code>
      <code>dispatch</code>
      <code>getArgument</code>
      <code>getArgument</code>
      <code><![CDATA[parent::__construct('run')]]></code>
    </MissingThrowsDocblock>
    <MixedArgument>
      <code>$eventName</code>
      <code><![CDATA[$input->getArgument('payload')]]></code>
    </MixedArgument>
    <MixedAssignment>
      <code>$eventName</code>
    </MixedAssignment>
    <UndefinedInterfaceMethod>
      <code>writeln</code>
    </UndefinedInterfaceMethod>
    <UnusedClass>
      <code>RunCommand</code>
    </UnusedClass>
  </file>
  <file src="src/Command/WorkflowCommand.php">
    <MissingThrowsDocblock>
      <code>addArgument</code>
      <code>addOption</code>
    </MissingThrowsDocblock>
    <UnusedClass>
      <code>WorkflowCommand</code>
    </UnusedClass>
  </file>
  <file src="src/Compliance.php">
    <PossiblyUnusedMethod>
      <code>main</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Configuration/ComplianceConfiguration.php">
    <MissingThrowsDocblock>
      <code>throw new RuntimeException();</code>
    </MissingThrowsDocblock>
    <MixedArgument>
      <code>$skips[$tool][$supportedPhpVersion] ?? []</code>
      <code>$supportedPhpVersion</code>
      <code>ComposerDependency::OPTIONS</code>
    </MixedArgument>
    <MixedArrayAccess>
      <code>PhpVersion::TO_STRING[$phpVersion]</code>
    </MixedArrayAccess>
    <MixedArrayOffset>
      <code>$skips[$tool][$supportedPhpVersion]</code>
    </MixedArrayOffset>
    <MixedArrayTypeCoercion>
      <code>$skips[$tool][$supportedPhpVersion]</code>
    </MixedArrayTypeCoercion>
    <MixedAssignment>
      <code>$supportedPhpVersion</code>
    </MixedAssignment>
    <MixedOperand>
      <code>ComposerDependency::CONFIG</code>
      <code>ComposerDependency::CONFIG</code>
      <code>PhpVersion::TO_STRING[$phpVersion]</code>
    </MixedOperand>
    <PossiblyInvalidArgument>
      <code>$skips[$tool] ?? []</code>
      <code>$skips[$tool][$phpVersion]</code>
    </PossiblyInvalidArgument>
    <PossiblyInvalidArrayAccess>
      <code>$skips[$tool][$phpVersion]</code>
      <code>$skips[$tool][$supportedPhpVersion]</code>
    </PossiblyInvalidArrayAccess>
    <UndefinedClass>
      <code>ComposerDependency</code>
      <code>ComposerDependency</code>
      <code>ComposerDependency</code>
      <code>PhpVersion</code>
      <code>PhpVersion</code>
      <code>PhpVersion</code>
      <code>PhpVersion</code>
    </UndefinedClass>
    <UndefinedDocblockClass>
      <code><![CDATA[array<ComposerDependency::*>]]></code>
    </UndefinedDocblockClass>
    <UnusedClass>
      <code>ComplianceConfiguration</code>
    </UnusedClass>
    <UnusedParam>
      <code>$options</code>
    </UnusedParam>
  </file>
  <file src="src/EnvironmentVariables.php">
    <MixedInferredReturnType>
      <code>string</code>
    </MixedInferredReturnType>
    <MixedReturnStatement>
      <code><![CDATA[match (true) {
            array_key_exists($name, $this->variables) => $this->variables[$name],
            $default !== null => $default,
            default => throw new VariableNotFoundException($name),
        }]]></code>
      <code><![CDATA[match (true) {
            array_key_exists($name, $this->variables) => $this->variables[$name],
            $default !== null => $default,
            default => throw new VariableNotFoundException($name),
        }]]></code>
    </MixedReturnStatement>
    <PossiblyUnusedMethod>
      <code>has</code>
    </PossiblyUnusedMethod>
    <RedundantCastGivenDocblockType>
      <code>(string) $value</code>
    </RedundantCastGivenDocblockType>
  </file>
  <file src="src/Event/AbstractEvent.php">
    <MissingTemplateParam>
      <code>EventTrait</code>
    </MissingTemplateParam>
    <MissingThrowsDocblock>
      <code>dispatch</code>
    </MissingThrowsDocblock>
    <PossiblyUnusedMethod>
      <code>__construct</code>
      <code>getDispatcher</code>
      <code>getOutput</code>
    </PossiblyUnusedMethod>
    <PossiblyUnusedReturnValue>
      <code><![CDATA[EventInterface<bool>]]></code>
    </PossiblyUnusedReturnValue>
  </file>
  <file src="src/Event/ConfigEvent.php">
    <UnusedClass>
      <code>ConfigEvent</code>
    </UnusedClass>
  </file>
  <file src="src/Event/GitHub/GitHubCreateEvent.php">
    <MissingTemplateParam>
      <code>EventTrait</code>
      <code>GitHubEventInterface</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Event/GitHub/GitHubDeleteEvent.php">
    <MissingTemplateParam>
      <code>EventTrait</code>
      <code>GitHubEventInterface</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Event/GitHub/GitHubDeploymentEvent.php">
    <MissingTemplateParam>
      <code>EventTrait</code>
      <code>GitHubEventInterface</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Event/GitHub/GitHubDeploymentStatusEvent.php">
    <MissingTemplateParam>
      <code>EventTrait</code>
      <code>GitHubEventInterface</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Event/GitHub/GitHubForkEvent.php">
    <MissingTemplateParam>
      <code>EventTrait</code>
      <code>GitHubEventInterface</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Event/GitHub/GitHubGollumEvent.php">
    <MissingTemplateParam>
      <code>EventTrait</code>
      <code>GitHubEventInterface</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Event/GitHub/GitHubIssueCommentEvent.php">
    <MissingTemplateParam>
      <code>EventTrait</code>
      <code>GitHubEventInterface</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Event/GitHub/GitHubIssuesEvent.php">
    <MissingTemplateParam>
      <code>EventTrait</code>
      <code>GitHubEventInterface</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Event/GitHub/GitHubLabelEvent.php">
    <MissingTemplateParam>
      <code>EventTrait</code>
      <code>GitHubEventInterface</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Event/GitHub/GitHubMergeGroupEvent.php">
    <MissingTemplateParam>
      <code>EventTrait</code>
      <code>GitHubEventInterface</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Event/GitHub/GitHubMilestoneEvent.php">
    <MissingTemplateParam>
      <code>EventTrait</code>
      <code>GitHubEventInterface</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Event/GitHub/GitHubPageBuildEvent.php">
    <MissingTemplateParam>
      <code>EventTrait</code>
      <code>GitHubEventInterface</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Event/GitHub/GitHubProjectCardEvent.php">
    <MissingTemplateParam>
      <code>EventTrait</code>
      <code>GitHubEventInterface</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Event/GitHub/GitHubProjectColumnEvent.php">
    <MissingTemplateParam>
      <code>EventTrait</code>
      <code>GitHubEventInterface</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Event/GitHub/GitHubProjectEvent.php">
    <MissingTemplateParam>
      <code>EventTrait</code>
      <code>GitHubEventInterface</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Event/GitHub/GitHubPublicEvent.php">
    <MissingTemplateParam>
      <code>EventTrait</code>
      <code>GitHubEventInterface</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Event/GitHub/GitHubPullRequestCommentEvent.php">
    <MissingTemplateParam>
      <code>EventTrait</code>
      <code>GitHubEventInterface</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Event/GitHub/GitHubPullRequestEvent.php">
    <MissingTemplateParam>
      <code>EventTrait</code>
      <code>GitHubEventInterface</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Event/GitHub/GitHubPullRequestReviewCommentEvent.php">
    <MissingTemplateParam>
      <code>EventTrait</code>
      <code>GitHubEventInterface</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Event/GitHub/GitHubPullRequestReviewEvent.php">
    <MissingTemplateParam>
      <code>EventTrait</code>
      <code>GitHubEventInterface</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Event/GitHub/GitHubPullRequestTargetEvent.php">
    <MissingTemplateParam>
      <code>EventTrait</code>
      <code>GitHubEventInterface</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Event/GitHub/GitHubPushEvent.php">
    <MissingTemplateParam>
      <code>EventTrait</code>
      <code>GitHubEventInterface</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Event/GitHub/GitHubRegistryPackageEvent.php">
    <MissingTemplateParam>
      <code>EventTrait</code>
      <code>GitHubEventInterface</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Event/GitHub/GitHubReleaseEvent.php">
    <MissingTemplateParam>
      <code>EventTrait</code>
      <code>GitHubEventInterface</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Event/GitHub/GitHubRepositoryDispatchEvent.php">
    <MissingTemplateParam>
      <code>EventTrait</code>
      <code>GitHubEventInterface</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Event/GitHub/GitHubScheduleEvent.php">
    <MissingTemplateParam>
      <code>EventTrait</code>
      <code>GitHubEventInterface</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Event/GitHub/GitHubStatusEvent.php">
    <MissingTemplateParam>
      <code>EventTrait</code>
      <code>GitHubEventInterface</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Event/GitHub/GitHubWatchEvent.php">
    <MissingTemplateParam>
      <code>EventTrait</code>
      <code>GitHubEventInterface</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Event/GitHub/GitHubWorkflowCallEvent.php">
    <MissingTemplateParam>
      <code>EventTrait</code>
      <code>GitHubEventInterface</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Event/GitHub/GitHubWorkflowDispatchEvent.php">
    <MissingTemplateParam>
      <code>EventTrait</code>
      <code>GitHubEventInterface</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Event/GitHub/GitHubWorkflowRunEvent.php">
    <MissingTemplateParam>
      <code>EventTrait</code>
      <code>GitHubEventInterface</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Event/MatrixEvent.php">
    <InvalidPropertyAssignmentValue>
      <code><![CDATA[$this->matrix]]></code>
    </InvalidPropertyAssignmentValue>
    <MissingThrowsDocblock>
      <code>encode</code>
    </MissingThrowsDocblock>
    <PossiblyUnusedMethod>
      <code>exclude</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Extension/ConfigExtension.php">
    <PossiblyUnusedMethod>
      <code>__construct</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Extension/ListenerProviderExtension.php">
    <MissingThrowsDocblock>
      <code>bind</code>
      <code>bind</code>
      <code>bind</code>
      <code>bind</code>
      <code>bind</code>
      <code>bind</code>
      <code>bind</code>
      <code>bind</code>
      <code>bind</code>
      <code>bind</code>
    </MissingThrowsDocblock>
    <PossiblyUnusedMethod>
      <code>__construct</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Extension/SymfonyApplicationExtension.php">
    <PossiblyUnusedMethod>
      <code>__construct</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Factory/ComposerExecutableFinderFactory.php">
    <MissingThrowsDocblock>
      <code>get</code>
      <code>get</code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Interface/Composer/DependencyInterface.php">
    <PossiblyUnusedMethod>
      <code>name</code>
      <code>version</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Listener/CheckListener.php">
    <MissingThrowsDocblock>
      <code>getArgument</code>
    </MissingThrowsDocblock>
    <UnusedClass>
      <code>CheckListener</code>
    </UnusedClass>
  </file>
  <file src="src/Listener/Debug.php">
    <PossiblyFalseOperand>
      <code><![CDATA[mb_strrpos($event::class, '\\')]]></code>
    </PossiblyFalseOperand>
    <PossiblyUnusedMethod>
      <code>__construct</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Listener/Logger.php">
    <MissingThrowsDocblock>
      <code>get</code>
      <code>get</code>
    </MissingThrowsDocblock>
    <UnusedClass>
      <code>Logger</code>
    </UnusedClass>
  </file>
  <file src="src/Listener/MatrixListener.php">
    <MissingThrowsDocblock>
      <code><![CDATA[throw new RuntimeException('Could not get current working directory');]]></code>
    </MissingThrowsDocblock>
    <PossiblyFalseArgument>
      <code><![CDATA[tempnam(sys_get_temp_dir(), 'GITHUB_OUTPUT')]]></code>
    </PossiblyFalseArgument>
    <UnnecessaryVarAnnotation>
      <code>string</code>
    </UnnecessaryVarAnnotation>
    <UnusedClass>
      <code>MatrixListener</code>
    </UnusedClass>
  </file>
  <file src="src/Listener/OutputListener.php">
    <UnusedClass>
      <code>OutputListener</code>
    </UnusedClass>
  </file>
  <file src="src/Service/Composer.php">
    <PossiblyUnusedMethod>
      <code>getPhpVersionConstraint</code>
      <code>getRequire</code>
      <code>getRequireDev</code>
      <code>readLockFile</code>
    </PossiblyUnusedMethod>
    <RiskyTruthyFalsyComparison>
      <code><![CDATA[getenv('COMPOSER')]]></code>
    </RiskyTruthyFalsyComparison>
  </file>
  <file src="src/Service/Composer/ComposerJson.php">
    <InvalidArrayOffset>
      <code><![CDATA[$contents['name']]]></code>
      <code><![CDATA[$contents['require']]]></code>
      <code><![CDATA[$contents['require-dev']]]></code>
      <code><![CDATA[$this->contents['license']]]></code>
      <code><![CDATA[$this->contents['name']]]></code>
      <code><![CDATA[$this->contents['version']]]></code>
    </InvalidArrayOffset>
    <MixedArgument>
      <code><![CDATA[$contents['name']]]></code>
      <code><![CDATA[$contents['require'] ?? []]]></code>
      <code><![CDATA[$contents['require']['php'] ?? '*']]></code>
      <code><![CDATA[$contents['require-dev'] ?? []]]></code>
      <code><![CDATA[$this->contents['license']]]></code>
      <code><![CDATA[$this->contents['name']]]></code>
      <code><![CDATA[$this->contents['version'] ??
            InstalledVersions::getPrettyVersion($this->contents['name'])]]></code>
    </MixedArgument>
    <MixedAssignment>
      <code>$dependency</code>
    </MixedAssignment>
    <PossiblyNullArgument>
      <code><![CDATA[$this->contents['version'] ??
            InstalledVersions::getPrettyVersion($this->contents['name'])]]></code>
    </PossiblyNullArgument>
    <PossiblyUnusedMethod>
      <code>getComposerJsonPath</code>
      <code>getContents</code>
      <code>getLicense</code>
      <code>getPackage</code>
      <code>getVersion</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Service/Composer/ComposerJsonReader.php">
    <MissingThrowsDocblock>
      <code>decode</code>
      <code><![CDATA[throw new InvalidArgumentException('Composer JSON file could not be read');]]></code>
      <code><![CDATA[throw new InvalidArgumentException('Composer JSON file does not exist: ' . $composerJsonPath);]]></code>
    </MissingThrowsDocblock>
    <NoValue>
      <code><![CDATA[(new Json())->decode($composerJsonContents)]]></code>
    </NoValue>
  </file>
  <file src="src/Service/Composer/ComposerLock.php">
    <PossiblyUnusedMethod>
      <code>getComposerJsonPath</code>
      <code>getContents</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Service/Composer/ComposerLockReader.php">
    <MissingThrowsDocblock>
      <code>decode</code>
      <code><![CDATA[throw new InvalidArgumentException('Composer JSON file could not be read');]]></code>
      <code><![CDATA[throw new InvalidArgumentException('Composer JSON file does not exist');]]></code>
    </MissingThrowsDocblock>
    <NoValue>
      <code><![CDATA[(new Json())->decode($composerJsonContents)]]></code>
    </NoValue>
  </file>
  <file src="src/Service/Composer/DependencyName.php">
    <MissingThrowsDocblock>
      <code><![CDATA[throw new InvalidArgumentException('Name cannot be empty');]]></code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Service/Composer/DependencyVersion.php">
    <MissingThrowsDocblock>
      <code><![CDATA[throw new InvalidArgumentException('Version cannot be empty');]]></code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Service/Composer/ExtensionFinder.php">
    <MixedAssignment>
      <code>$dependency</code>
    </MixedAssignment>
    <UnusedClass>
      <code>ExtensionFinder</code>
    </UnusedClass>
  </file>
  <file src="src/Service/Composer/Extensions.php">
    <MissingThrowsDocblock>
      <code><![CDATA[throw new InvalidArgumentException('Extensions cannot be empty');]]></code>
    </MissingThrowsDocblock>
    <MixedArgumentTypeCoercion>
      <code><![CDATA[$this->jsonSerialize()]]></code>
    </MixedArgumentTypeCoercion>
  </file>
  <file src="src/Service/Composer/Package.php">
    <MissingThrowsDocblock>
      <code>encode</code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Service/Composer/Packages.php">
    <MissingThrowsDocblock>
      <code>encode</code>
    </MissingThrowsDocblock>
    <UnusedClass>
      <code>Packages</code>
    </UnusedClass>
  </file>
  <file src="src/Service/Composer/RequireDevList.php">
    <MixedArgument>
      <code>$version</code>
    </MixedArgument>
    <MixedArgumentTypeCoercion>
      <code>$name</code>
    </MixedArgumentTypeCoercion>
    <MixedAssignment>
      <code>$version</code>
    </MixedAssignment>
  </file>
  <file src="src/Service/Composer/RequireList.php">
    <MixedArgument>
      <code>$version</code>
    </MixedArgument>
    <MixedArgumentTypeCoercion>
      <code>$name</code>
    </MixedArgumentTypeCoercion>
    <MixedAssignment>
      <code>$version</code>
    </MixedAssignment>
  </file>
  <file src="src/Service/ComposerCacheFilesDirectoryFinder.php">
    <MissingThrowsDocblock>
      <code>throw new FailedToFindComposerCacheFilesDirectoryException($stderr);</code>
    </MissingThrowsDocblock>
    <PossiblyUnusedMethod>
      <code>__construct</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Service/ComposerExecutableFinder.php">
    <MissingThrowsDocblock>
      <code>throw new FailedToFindComposerExecutableException($stderr);</code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Service/ComposerFileField.php">
    <UnusedClass>
      <code>ComposerFileField</code>
    </UnusedClass>
  </file>
  <file src="src/Service/ComposerJsonFile.php">
    <UnusedClass>
      <code>ComposerJsonFile</code>
    </UnusedClass>
  </file>
  <file src="src/Service/ComposerLockFile.php">
    <UnusedClass>
      <code>ComposerLockFile</code>
    </UnusedClass>
  </file>
  <file src="src/Service/ConfigPlatformPhp.php">
    <UnusedClass>
      <code>ConfigPlatformPhp</code>
    </UnusedClass>
  </file>
  <file src="src/Service/Filesystem.php">
    <ArgumentTypeCoercion>
      <code>$levels</code>
    </ArgumentTypeCoercion>
    <MismatchingDocblockReturnType>
      <code>bool</code>
    </MismatchingDocblockReturnType>
    <MissingThrowsDocblock>
      <code><![CDATA[throw new RuntimeException(sprintf(
                'Filesystem::chgrp() failed because the path does not exist: %s',
                $path
            ));]]></code>
      <code><![CDATA[throw new RuntimeException(sprintf(
                'Filesystem::chmod() failed because the path does not exist: %s',
                $path
            ));]]></code>
      <code><![CDATA[throw new RuntimeException(sprintf(
                'Filesystem::chown() failed because the path does not exist: %s',
                $path
            ));]]></code>
      <code><![CDATA[throw new RuntimeException(sprintf(
                'Filesystem::copy() failed because the source path does not exist: %s',
                $source
            ));]]></code>
      <code><![CDATA[throw new RuntimeException(sprintf(
                'Filesystem::create() failed because the path already exists: %s',
                $path
            ));]]></code>
      <code><![CDATA[throw new RuntimeException(sprintf(
                'Filesystem::createDirectory() failed because the path already exists: %s',
                $path
            ));]]></code>
      <code><![CDATA[throw new RuntimeException(sprintf(
                'Filesystem::delete() failed because the path does not exist: %s',
                $path
            ));]]></code>
      <code><![CDATA[throw new RuntimeException(sprintf(
                'Filesystem::deleteDirectory() failed because the path does not exist: %s',
                $path
            ));]]></code>
      <code><![CDATA[throw new RuntimeException(sprintf(
                'Filesystem::move() failed because the source path does not exist: %s',
                $source
            ));]]></code>
      <code><![CDATA[throw new RuntimeException(sprintf('Filesystem::append() failed to write to path: %s', $path));]]></code>
      <code><![CDATA[throw new RuntimeException(sprintf('Filesystem::prepend() failed to write to path: %s', $path));]]></code>
      <code><![CDATA[throw new RuntimeException(sprintf('Filesystem::read() failed to read from path: %s', $path));]]></code>
      <code><![CDATA[throw new RuntimeException(sprintf('Filesystem::write() failed to write to path: %s', $path));]]></code>
    </MissingThrowsDocblock>
    <MixedAssignment>
      <code>$file</code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code>bool</code>
    </MixedInferredReturnType>
    <MixedOperand>
      <code>$file</code>
    </MixedOperand>
    <MixedReturnTypeCoercion>
      <code><![CDATA[Generator<SplFileInfo>]]></code>
    </MixedReturnTypeCoercion>
    <PossiblyFalseArgument>
      <code>scandir($path)</code>
    </PossiblyFalseArgument>
    <PossiblyUnusedMethod>
      <code>allFiles</code>
      <code>append</code>
      <code>chgrp</code>
      <code>chmod</code>
      <code>chown</code>
      <code>copy</code>
      <code>createFile</code>
      <code>delete</code>
      <code>exists</code>
      <code>findInRecursive</code>
      <code>glob</code>
      <code>missing</code>
      <code>move</code>
      <code>prepend</code>
    </PossiblyUnusedMethod>
    <UnusedParam>
      <code>$flags</code>
      <code>$pattern</code>
    </UnusedParam>
  </file>
  <file src="src/Service/GPG/Fingerprint.php">
    <UnusedClass>
      <code>Fingerprint</code>
    </UnusedClass>
  </file>
  <file src="src/Service/GPG/GnuPG2.php">
    <MissingThrowsDocblock>
      <code><![CDATA[throw new RuntimeException(sprintf('GnuPG binary "%s" does not exist', $binary));]]></code>
    </MissingThrowsDocblock>
    <UnusedClass>
      <code>GnuPG2</code>
    </UnusedClass>
  </file>
  <file src="src/Service/GPG/ImportPrivateKey.php">
    <UnusedClass>
      <code>ImportPrivateKey</code>
    </UnusedClass>
  </file>
  <file src="src/Service/GPG/ImportPublicKey.php">
    <UnusedClass>
      <code>ImportPublicKey</code>
    </UnusedClass>
  </file>
  <file src="src/Service/GPG/PrivateKey.php">
    <UnusedClass>
      <code>PrivateKey</code>
    </UnusedClass>
  </file>
  <file src="src/Service/GPG/PublicKey.php">
    <UnusedClass>
      <code>PublicKey</code>
    </UnusedClass>
  </file>
  <file src="src/Service/GithubActionOutput.php">
    <RiskyTruthyFalsyComparison>
      <code>! $file</code>
    </RiskyTruthyFalsyComparison>
    <UnusedClass>
      <code>GithubActionOutput</code>
    </UnusedClass>
  </file>
  <file src="src/Service/Job.php">
    <MixedArgumentTypeCoercion>
      <code>$extensions</code>
    </MixedArgumentTypeCoercion>
    <RiskyTruthyFalsyComparison>
      <code>getcwd()</code>
    </RiskyTruthyFalsyComparison>
  </file>
  <file src="src/Service/Process.php">
    <LessSpecificReturnStatement>
      <code>[proc_close($process), ...$result]</code>
    </LessSpecificReturnStatement>
    <MissingThrowsDocblock>
      <code><![CDATA[throw new FailedToExecuteCommandException(implode(' ', $command));]]></code>
      <code>throw new FailedToWriteToStdinException();</code>
      <code>throw new ProcOpenFunctionDoesNotExistException();</code>
    </MissingThrowsDocblock>
    <MoreSpecificReturnType>
      <code>array{int,string,string}</code>
    </MoreSpecificReturnType>
  </file>
  <file src="src/ServiceProvider/ApplicationServiceProvider.php">
    <PossiblyUnusedMethod>
      <code>__construct</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/ServiceProvider/ConfigServiceProvider.php">
    <MissingThrowsDocblock>
      <code>alias</code>
      <code>alias</code>
      <code>alias</code>
      <code>alias</code>
    </MissingThrowsDocblock>
    <UnusedClass>
      <code>ConfigServiceProvider</code>
    </UnusedClass>
  </file>
  <file src="src/ServiceProvider/ConsoleServiceProvider.php">
    <MissingThrowsDocblock>
      <code>alias</code>
      <code>alias</code>
      <code>alias</code>
      <code>alias</code>
      <code>alias</code>
      <code>alias</code>
      <code>alias</code>
      <code>alias</code>
    </MissingThrowsDocblock>
    <UnusedClass>
      <code>ConsoleServiceProvider</code>
    </UnusedClass>
  </file>
  <file src="src/ServiceProvider/EventServiceProvider.php">
    <MissingThrowsDocblock>
      <code>alias</code>
      <code>alias</code>
      <code>alias</code>
      <code>alias</code>
    </MissingThrowsDocblock>
    <UnusedClass>
      <code>EventServiceProvider</code>
    </UnusedClass>
  </file>
  <file src="src/Tool/AbstractTool.php">
    <PossiblyNullArgument>
      <code><![CDATA[preg_replace('#([a-zA-Z])(?=[A-Z])#', '$1-', $this->name())]]></code>
    </PossiblyNullArgument>
    <PossiblyUnusedMethod>
      <code>__construct</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Tool/ComposerRequireChecker.php">
    <UnusedClass>
      <code>ComposerRequireChecker</code>
    </UnusedClass>
  </file>
  <file src="src/Tool/Infection.php">
    <UnusedClass>
      <code>Infection</code>
    </UnusedClass>
  </file>
  <file src="src/Tool/PHPBench.php">
    <UnusedClass>
      <code>PHPBench</code>
    </UnusedClass>
  </file>
  <file src="src/Tool/PHPCS.php">
    <UnusedClass>
      <code>PHPCS</code>
    </UnusedClass>
  </file>
  <file src="src/Tool/Psalm.php">
    <UnusedClass>
      <code>Psalm</code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/Service/ComposerTest.php">
    <PossiblyFalseArgument>
      <code>$root</code>
      <code>$root</code>
    </PossiblyFalseArgument>
    <PossiblyFalseOperand>
      <code>$root</code>
      <code>$root</code>
    </PossiblyFalseOperand>
  </file>
</files>
