name: Automation

on:
  # pull_request:
  # push:
  #   branches:
  #     - "main"
  #     - "[0-9]+.[0-9]+.x"
  #     - "v[0-9]+"
  schedule:
    - cron: "0 * * * *" # Runs hourly
  workflow_dispatch:
  workflow_run:
    workflows: ["Docker Build"]
    types:
      - completed
  workflow_call:
    secrets:
      GPG_PRIVATE_KEY:
        required: false
      INFECTION_DASHBOARD_API_KEY:
        required: false
      CODECOV_TOKEN:
        required: false # For public repositories, no token is needed

# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions
permissions:
  actions: write #  permits an action to cancel a workflow run.
  checks: write # permits an action to create a check run.
  contents: write # allows the action to create a release.
  discussions: write # permits an action to close or delete a discussion.
  pull-requests: write # permits an action to add a label to a pull request.
  issues: write # permits an action to add a comment to an issue
  packages: write # permits an action to upload and publish packages on GitHub Packages.
  pages: write # permits an action to request a GitHub Pages build.

jobs:
  matrix:
    name: Generate job matrix
    concurrency:
      group: ${{ github.event_name }}-${{ github.workflow }}
      cancel-in-progress: true
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # - name: Determine CI Jobs (dev)
      #   id: matrix
      #   if: github.event_name == 'push' || github.event_name == 'pull_request'
      #   uses: ghostwriter/compliance@v1
      #   with:
      #     command: matrix

      - name: Determine CI Jobs
        id: matrix
        uses: docker://ghcr.io/ghostwriter/compliance:v1

  qa:
    name: "${{ matrix.name }} on ${{ matrix.os }} with PHP ${{ matrix.php }} and Composer ${{ matrix.dependency }}"
    needs: [matrix]
    runs-on: ${{ matrix.os }}-latest
    continue-on-error: ${{ matrix.dependency == 'lowest' || matrix.experimental }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup PHP ${{ matrix.php }} with ${{ join(matrix.extensions, ', ') }} extensions.
        uses: shivammathur/setup-php@v2
        with:
          coverage: pcov
          ini-values: assert.exception=1, zend.assertions=1, error_reporting=-1, log_errors_max_len=0, display_errors=On
          php-version: ${{ matrix.php }}
          extensions: :php-psr,pcntl, ${{ join(matrix.extensions, ', ') }}

      - name: Setup problem matchers
        run: |
          echo "::add-matcher::${{ runner.tool_cache }}/php.json"
          echo "::add-matcher::${{ runner.tool_cache }}/phpunit.json"

      - name: Cache composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ matrix.composerCacheFilesDirectory }}
          key: ${{ runner.os }}-php-${{ matrix.php }}-composer-${{ matrix.dependency }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-php-${{ matrix.php }}-composer-${{ matrix.dependency }}-

      - name: Validate composer.json file
        working-directory: ${{ github.workspace }}
        run: ${{ matrix.validateCommand }}

      - name: Install ${{ matrix.dependency }} dependencies
        working-directory: ${{ github.workspace }}
        run: composer config --no-plugins allow-plugins.ghostwriter/coding-standard true; ${{ matrix.installCommand }}

      - name: Run ${{ matrix.name }} command
        run: ${{ matrix.runCommand }}
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          INFECTION_DASHBOARD_API_KEY: ${{ secrets.INFECTION_DASHBOARD_API_KEY || secrets.STRYKER_DASHBOARD_API_KEY }}

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: ${{ matrix.php == '8.3' && matrix.dependency == 'locked' }}
        with:
          token: ${{ secrets.CODECOV_TOKEN || '63caea06-f036-4606-a791-ccbd81d86c51' }}
          directory: ${{ github.workspace }}/.cache/phpunit/
          verbose: true
