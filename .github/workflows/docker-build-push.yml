name: Docker Build

on:
  pull_request:
  push:
    branches:
      - 'v[0-9]+'
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  schedule:
    - cron: "0 * * * *" # Runs every hour, on the hour.
  workflow_dispatch:

permissions:
  packages: write

env:
  SUPPORTED_PLATFORMS: "linux/amd64,linux/arm64,linux/arm/v7"
  DOCKER_IMAGE: "ghcr.io/${{ github.repository_owner }}/compliance"

jobs:
  builder:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=ref,event=pr
            type=schedule
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,format=long,prefix=,suffix=

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Packages Docker Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}

      - name: Inspect builder
        run: |
          echo "Name:      ${{ steps.buildx.outputs.name }}"
          echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
          echo "Status:    ${{ steps.buildx.outputs.status }}"
          echo "Flags:     ${{ steps.buildx.outputs.flags }}"
          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"

      - name: Build and Push ${{ env.DOCKER_IMAGE }}:${{ steps.meta.outputs.version }}
        uses: docker/build-push-action@v3
        with:
          cache-from: type=gha,scope=${{ env.DOCKER_IMAGE }}:${{ steps.meta.outputs.version }}
          cache-to: type=gha,scope=${{ env.DOCKER_IMAGE }}:${{ steps.meta.outputs.version }},mode=max
          platforms: ${{ env.SUPPORTED_PLATFORMS}}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
